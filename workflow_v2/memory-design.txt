// Task-Centric Memory Structure for Text-to-SQL

interface Memory {
  // ========== Query Representation (Core) ==========
  query: {
    original: string;                    // The original natural language query
    tree: QueryTree;                     // Logical decomposition of the query
  };
  
  // ========== Data Model (Core) ==========
  schema: {
    tables: Table[];                     // Available tables in the database
    relationships: Relationship[];       // Foreign key and logical relationships
    constraints: Constraint[];           // Business rules and constraints
  };
  
  // ========== Mappings (Core) ==========
  mappings: {
    [nodeId: string]: {
      intent_to_schema: IntentSchemaMapping;    // How intent maps to schema
      schema_to_sql: SchemaToSQLMapping;         // How schema maps to SQL
    };
  };
  
  // ========== SQL Representation (Core) ==========
  sql: {
    [nodeId: string]: {
      expression: string | null;         // SQL for this node
      type: SQLType;                     // SELECT, CTE, SUBQUERY, etc.
      combines: string[];                // Node IDs this SQL combines
    };
  };
  
  // ========== Results (Core) ==========
  results: {
    [nodeId: string]: {
      data: any;                         // Actual data/results
      metadata: ResultMetadata;          // Row count, column types, etc.
    };
  };
  
  // ========== Process Support (Auxiliary) ==========
  process: {
    state: ProcessState;                 // Current state of execution
    plan: ExecutionPlan;                 // Planned actions
    history: ProcessEvent[];             // What has been done
    errors: Error[];                     // Errors encountered
  };
}

// ========== Core Type Definitions ==========

interface QueryTree {
  root: string;                          // Root node ID
  nodes: {
    [nodeId: string]: QueryNode;
  };
}

interface QueryNode {
  id: string;
  
  // What information is being requested
  intent: {
    description: string;                 // Natural language description
    information_need: InformationNeed;   // Structured representation
    constraints: QueryConstraint[];      // Filters, limits, conditions
    relationships: string[];             // Related node IDs
  };
  
  // Logical structure
  structure: {
    type: NodeType;                      // atomic | composite | aggregation | transformation
    parent: string | null;               // Parent node ID
    children: string[];                  // Child node IDs
    dependencies: string[];              // Nodes this depends on for data
  };
}

type NodeType = 
  | "atomic"          // Single piece of information
  | "composite"       // Combines multiple pieces
  | "aggregation"     // Summarizes information
  | "transformation"; // Derives new information

interface InformationNeed {
  entities: string[];                    // What entities are involved
  attributes: string[];                  // What attributes are needed
  operations: Operation[];               // What operations to perform
  scope: Scope;                         // Time range, filters, etc.
}

interface Operation {
  type: "select" | "filter" | "aggregate" | "transform" | "combine" | "rank" | "compare";
  parameters: Record<string, any>;
}

interface Scope {
  temporal?: { start?: string; end?: string };
  spatial?: { region?: string; location?: string };
  categorical?: { [dimension: string]: string[] };
  quantitative?: { [metric: string]: { min?: number; max?: number } };
}

// ========== Schema Types ==========

interface Table {
  name: string;
  columns: Column[];
  type: "table" | "view" | "materialized_view";
  description?: string;
  statistics?: TableStatistics;
}

interface Column {
  name: string;
  dataType: string;
  nullable: boolean;
  isPrimaryKey: boolean;
  isForeignKey: boolean;
  description?: string;
  semanticType?: SemanticType;         // e.g., "customer_id", "date", "amount"
}

type SemanticType = 
  | "identifier" 
  | "date" 
  | "timestamp" 
  | "amount" 
  | "quantity" 
  | "category" 
  | "description"
  | "measure"
  | "dimension";

interface Relationship {
  from: { table: string; column: string };
  to: { table: string; column: string };
  type: "one-to-one" | "one-to-many" | "many-to-many";
  semantic: string;                      // e.g., "customer_has_orders"
}

// ========== Mapping Types ==========

interface IntentSchemaMapping {
  entities: EntityMapping[];
  attributes: AttributeMapping[];
  operations: OperationMapping[];
}

interface EntityMapping {
  intent_entity: string;                 // Entity from the query
  schema_tables: string[];               // Corresponding tables
  join_path?: JoinPath;                  // How to join if multiple tables
}

interface AttributeMapping {
  intent_attribute: string;              // Attribute from the query
  schema_column: string;                 // Actual column
  table: string;                         // Table containing the column
  transformation?: string;               // Any transformation needed
}

interface OperationMapping {
  intent_operation: Operation;
  sql_construct: string;                 // GROUP BY, WHERE, HAVING, etc.
  implementation: string;                // Actual SQL fragment
}

interface SchemaToSQLMapping {
  tables: string[];                      // Tables used
  joins: JoinSpecification[];            // How tables are joined
  selections: SelectionSpec[];           // What columns to select
  conditions: ConditionSpec[];           // WHERE/HAVING conditions
  grouping: GroupingSpec | null;         // GROUP BY specification
  ordering: OrderingSpec | null;         // ORDER BY specification
  limiting: LimitSpec | null;            // LIMIT specification
}

// ========== SQL Types ==========

type SQLType = 
  | "select"
  | "cte"
  | "subquery"
  | "union"
  | "intersection"
  | "except";

interface ResultMetadata {
  rowCount: number;
  columns: {
    name: string;
    type: string;
    nullable: boolean;
  }[];
  executionTime?: number;
  isComplete: boolean;                   // False if truncated
}

// ========== Process Support Types ==========

interface ProcessState {
  activeNodes: string[];                 // Nodes currently being processed
  completedNodes: string[];              // Nodes with results
  failedNodes: string[];                 // Nodes that failed
  currentFocus: string | null;           // Current node being worked on
}

interface ExecutionPlan {
  queue: PlannedAction[];                // Actions to take
  strategy: "depth-first" | "breadth-first" | "priority-based";
  optimizations: Optimization[];         // Identified optimizations
}

interface PlannedAction {
  nodeId: string;
  action: "analyze" | "map" | "generate" | "execute" | "validate";
  priority: number;
  dependencies: string[];                // Other actions that must complete first
  metadata?: Record<string, any>;
}

interface ProcessEvent {
  timestamp: string;
  nodeId: string;
  action: string;
  result: "success" | "failure" | "partial";
  details?: any;
}

interface Error {
  timestamp: string;
  nodeId: string;
  type: "mapping" | "generation" | "execution" | "validation";
  message: string;
  context: Record<string, any>;
  recoverable: boolean;
}

interface Optimization {
  type: "index_usage" | "join_order" | "subquery_elimination" | "cte_reuse";
  description: string;
  applicableNodes: string[];
}

// ========== Helper Types ==========

interface JoinPath {
  steps: JoinStep[];
}

interface JoinStep {
  from: string;
  to: string;
  on: { left: string; right: string };
  type: "inner" | "left" | "right" | "full";
}

interface JoinSpecification {
  left: string;
  right: string;
  type: "inner" | "left" | "right" | "full";
  conditions: JoinCondition[];
}

interface JoinCondition {
  leftColumn: string;
  rightColumn: string;
  operator: string;
}

interface SelectionSpec {
  expression: string;
  alias?: string;
  source: string;                        // Table or node ID
}

interface ConditionSpec {
  expression: string;
  type: "where" | "having" | "join";
  parameters?: any[];
}

interface GroupingSpec {
  columns: string[];
  havingConditions?: string[];
}

interface OrderingSpec {
  columns: { column: string; direction: "asc" | "desc" }[];
}

interface LimitSpec {
  count: number;
  offset?: number;
}

interface TableStatistics {
  rowCount?: number;
  sizeInBytes?: number;
  lastUpdated?: string;
}

interface QueryConstraint {
  type: "temporal" | "spatial" | "quantitative" | "categorical";
  specification: any;
}

interface Constraint {
  type: "business_rule" | "data_quality" | "performance";
  description: string;
  affectedTables: string[];
}

// ========== Example Usage ==========

const exampleMemory: Memory = {
  query: {
    original: "Find top 5 customers by total purchase amount in Q4 2023 with their favorite product category",
    tree: {
      root: "node-1",
      nodes: {
        "node-1": {
          id: "node-1",
          intent: {
            description: "Top 5 customers with purchase stats and preferences",
            information_need: {
              entities: ["customer", "purchase", "product_category"],
              attributes: ["customer_id", "total_amount", "favorite_category"],
              operations: [
                { type: "aggregate", parameters: { function: "sum", attribute: "amount" } },
                { type: "aggregate", parameters: { function: "mode", attribute: "category" } },
                { type: "rank", parameters: { by: "total_amount", limit: 5 } }
              ],
              scope: {
                temporal: { start: "2023-10-01", end: "2023-12-31" }
              }
            },
            constraints: [
              { type: "temporal", specification: { quarter: "Q4", year: 2023 } },
              { type: "quantitative", specification: { top_n: 5 } }
            ],
            relationships: ["node-2", "node-3"]
          },
          structure: {
            type: "composite",
            parent: null,
            children: ["node-2", "node-3"],
            dependencies: ["node-2", "node-3"]
          }
        },
        "node-2": {
          id: "node-2",
          intent: {
            description: "Customer purchase totals in Q4 2023",
            information_need: {
              entities: ["customer", "purchase"],
              attributes: ["customer_id", "amount"],
              operations: [
                { type: "filter", parameters: { timeframe: "Q4 2023" } },
                { type: "aggregate", parameters: { function: "sum", groupBy: "customer_id" } }
              ],
              scope: {
                temporal: { start: "2023-10-01", end: "2023-12-31" }
              }
            },
            constraints: [],
            relationships: ["node-1"]
          },
          structure: {
            type: "aggregation",
            parent: "node-1",
            children: [],
            dependencies: []
          }
        },
        "node-3": {
          id: "node-3",
          intent: {
            description: "Customer favorite product categories",
            information_need: {
              entities: ["customer", "product", "category"],
              attributes: ["customer_id", "category"],
              operations: [
                { type: "aggregate", parameters: { function: "mode", groupBy: "customer_id" } }
              ],
              scope: {
                temporal: { start: "2023-10-01", end: "2023-12-31" }
              }
            },
            constraints: [],
            relationships: ["node-1"]
          },
          structure: {
            type: "aggregation",
            parent: "node-1",
            children: [],
            dependencies: []
          }
        }
      }
    }
  },
  
  schema: {
    tables: [
      {
        name: "customers",
        columns: [
          { name: "customer_id", dataType: "integer", nullable: false, isPrimaryKey: true, isForeignKey: false, semanticType: "identifier" },
          { name: "name", dataType: "varchar", nullable: false, isPrimaryKey: false, isForeignKey: false, semanticType: "description" }
        ],
        type: "table"
      },
      {
        name: "orders",
        columns: [
          { name: "order_id", dataType: "integer", nullable: false, isPrimaryKey: true, isForeignKey: false, semanticType: "identifier" },
          { name: "customer_id", dataType: "integer", nullable: false, isPrimaryKey: false, isForeignKey: true, semanticType: "identifier" },
          { name: "order_date", dataType: "date", nullable: false, isPrimaryKey: false, isForeignKey: false, semanticType: "date" },
          { name: "total_amount", dataType: "decimal", nullable: false, isPrimaryKey: false, isForeignKey: false, semanticType: "amount" }
        ],
        type: "table"
      }
    ],
    relationships: [
      {
        from: { table: "orders", column: "customer_id" },
        to: { table: "customers", column: "customer_id" },
        type: "many-to-one",
        semantic: "order_placed_by_customer"
      }
    ],
    constraints: []
  },
  
  mappings: {},
  sql: {},
  results: {},
  
  process: {
    state: {
      activeNodes: [],
      completedNodes: [],
      failedNodes: [],
      currentFocus: null
    },
    plan: {
      queue: [],
      strategy: "depth-first",
      optimizations: []
    },
    history: [],
    errors: []
  }
};