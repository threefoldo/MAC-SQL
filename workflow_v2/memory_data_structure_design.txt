interface TextToSQLMemory {
  // 1. Task Context - Keep as is
  taskContext: {
    taskId: string;
    originalQuery: string;
    databaseName: string;
    startTime: string;
    status: 'initializing' | 'processing' | 'completed' | 'failed';
  };

  // 2. Database Schema - Keep as is
  databaseSchema: {
    tables: {
      [tableName: string]: {
        columns: {
          [columnName: string]: {
            dataType: string;
            nullable: boolean;
            isPrimaryKey: boolean;
            isForeignKey: boolean;
            references?: {
              table: string;
              column: string;
            };
          };
        };
        sampleData?: Array<{[columnName: string]: any}>;
        metadata?: {
          rowCount?: number;
          indexes?: string[];
        };
      };
    };
  };

  // 3. Query Tree - Current state
  queryTree: {
    rootId: string;
    currentNodeId?: string;
    nodes: {
      [nodeId: string]: QueryNode;
    };
  };

  // 4. Node History - All node operations including deleted nodes
  nodeHistory: NodeOperation[];
}

// Query Node - Represents a sub-query at current state
interface QueryNode {
  nodeId: string;
  
  // Sub-query intent
  intent: string; // Natural language description of what this node should do
  
  // Schema mapping context
  mapping: {
    tables: Array<{
      name: string;
      alias?: string;
      purpose: string; // Why this table is needed for this sub-query
    }>;
    columns: Array<{
      table: string;
      column: string;
      usedFor: string; // select/filter/join/groupBy/orderBy
    }>;
    joins?: Array<{
      from: string;
      to: string;
      on: string;
    }>;
  };
  
  // Generated SQL
  sql?: string;
  
  // Execution result
  executionResult?: {
    data: any;
    rowCount: number;
    error?: string;
  };
  
  // Tree structure
  parentId?: string;
  childIds: string[];
  
  // Combination strategy for child results
  combineStrategy?: {
    type: 'union' | 'join' | 'aggregate' | 'filter' | 'custom';
    
    // For union
    unionType?: 'UNION' | 'UNION ALL';
    
    // For join
    joinOn?: string[];
    joinType?: 'INNER' | 'LEFT' | 'RIGHT' | 'FULL';
    
    // For aggregate
    aggregateFunction?: string; // SUM, COUNT, AVG, etc.
    groupBy?: string[];
    
    // For filter
    filterCondition?: string;
    
    // For custom - template SQL with placeholders
    template?: string; // e.g., "SELECT * FROM ({{child_0}}) a WHERE a.value > (SELECT AVG(value) FROM ({{child_1}}) b)"
  };
  
  // Current status
  status: 'created' | 'sql_generated' | 'executed_success' | 'executed_failed' | 'revised';
}

// Simplified operation history
interface NodeOperation {
  timestamp: string;
  nodeId: string;
  operation: 'create' | 'generate_sql' | 'execute' | 'revise' | 'delete';
  
  // Operation details
  data: {
    // For all operations
    intent?: string;
    
    // For create, revise
    mapping?: QueryNode['mapping'];
    combineStrategy?: QueryNode['combineStrategy'];
    
    // For generate_sql, execute, revise
    sql?: string;
    
    // For execute
    result?: any;
    error?: string;
    
    // For revise - what changed
    previousIntent?: string;
    previousSql?: string;
    previousMapping?: QueryNode['mapping'];
    
    // For delete
    reason?: string;
  };
}